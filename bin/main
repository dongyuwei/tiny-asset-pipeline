#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var os = require('os');
var daemon = require('daemon');
var release = require('../index.js');
var conf = require("argsparser").parse();

if(process.argv.length === 2){
    console.error('#package project#: tiny-asset-pipeline -from sourceDirectoty -to destinationDirectoty [-mappingFile /tmp/md5_mapping.json] [-browsers "> 1%, last 2 version"] [-opts safe=true,map=fasle] [-verbose or -v]');
    console.error('#start    server#: tiny-asset-pipeline -start  [-port 8888] [-root assetsRootDirectoty]');
    console.error('#stop     server#: tiny-asset-pipeline -stop');
    process.exit(1);
}

var port = parseInt(conf['-port'], 10) || 8888;
var tmpPath = path.join(os.tmpDir(), port.toString());
var pidPath = path.join(os.tmpDir(), port.toString() + '.pid');
var stdout = tmpPath + '_stdout.log', stderr = tmpPath + '_stderr.log';
if(conf['-start'] || conf['-restart']){
    kill();
    console.log(">>>tiny-asset-pipeline's stdout log: ", stdout);
    console.log(">>>tiny-asset-pipeline's stderr log: ", stderr);
    var config = [];
    for(var key in conf){
        if(conf.hasOwnProperty(key)){
            config.push(key);
            config.push(conf[key]);
        }
    }
    var child = daemon.daemon(path.resolve(__dirname,'..','lib','server','httpd.js'), config, {
        stdout : fs.openSync(stdout, 'w'),
        stderr : fs.openSync(stderr, 'w')
    });
    fs.writeFile(pidPath, child.pid);
    return;
}
if(conf['-stop']){
    kill();
    process.exit(0);
}

function kill(){
    if(fs.existsSync(pidPath)){
        var pid = parseInt(fs.readFileSync(pidPath,'utf-8'), 10);
        if(pid > 0){
            try{
                process.kill(pid);
                fs.unlinkSync(pidPath);
                fs.unlinkSync(stdout);
                fs.unlinkSync(stderr);
            }catch(e){
                console.error('failed to stop tiny-asset-pipeline HTTP server');
            }
        }
    }
}
release(conf);
